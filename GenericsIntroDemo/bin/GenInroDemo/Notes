Generics Definition:
- The Java Generics programming is introduced in J2SE 5 to deal with type-safe objects.
- It makes the code stable by detecting the bugs at compile time.
- Before generics, we can store any type of objects in the collection, i.e., non-generic. 
- Now generics force the java programmer to store a specific type of objects.
- Advantages:
	- Type Safety: We can hold only a single type of objects in generics. It doesn?t allow to store other objects.
		Eg:
			//Without Generics, we can store any type of objects
			List list = new ArrayList();    
			list.add(10);  
			list.add("10");  
			//With Generics, it is required to specify the type of object we need to store.  
			List<Integer> list = new ArrayList<Integer>();    
			list.add(10);  
			list.add("10");// compile-time error  
			
	- Type Casting Not Required: There is no need to typecast the object.
		Eg:
			//Before Generics, we need to type cast.
			List list = new ArrayList();    
			list.add("hello");    
			String s = (String) list.get(0);//typecasting    
			//After Generics, we don't need to typecast the object.  
			List<String> list = new ArrayList<String>();    
			list.add("hello");    
			String s = list.get(0);    
	- Compile-Time Checking: It is checked at compile time so problem will not occur at runtime. 
							 The good programming strategy says it is far better to handle the problem at compile time than runtime.
		Eg:
			List<String> list = new ArrayList<String>();    
			list.add("hello");    
			list.add(32);//Compile Time Error

Syntax to use generic collection
			ClassOrInterface<Type>    

Example to use Generics in java
			ArrayList<String> 
			
			
Type Parameters in Java Generics:

The type parameters naming conventions are important to learn generics thoroughly. The common type parameters are as follows:

T – Type
E – Element
K – Key
N – Number
V – Value



Advantages of Generics:
1. Code Reuse
2. Type Safety
3. Individual Type Casting is not needed

			