Builder Patters:
-> Builder pattern builds a complex object using simple objects and using a step by step approach. 
-> A Builder class builds the final object step by step. 
-> This builder is independent of other objects.

Example: 
We have considered a business case of fast-food restaurant where a typical meal could be a burger and a cold drink. Burger could be either a Veg Burger or Chicken Burger and will be packed by a wrapper. Cold drink could be either a coke or pepsi and will be packed in a bottle.

We are going to create an Item interface representing food items such as burgers and cold drinks and concrete classes implementing the Item interface and a Packing interface representing packaging of food items and concrete classes implementing the Packing interface as burger would be packed in wrapper and cold drink would be packed as bottle.

We then create a Meal class having ArrayList of Item and a MealBuilder to build different types of Meal objects by combining Item. BuilderPatternDemo, our demo class will use MealBuilder to build a Meal.

->Refer the Image in Source Folder for more detailed depiction

Steps:
Step1: Create an interface Item representing food item and Packing representing package. (Item.java & Packaging.java)
Step2: Create concrete classes implementing the Packing interface. (Wrapper.java & Bottle.java)
Step3: Create abstract classes implementing the item interface providing default functionalities. (Burger.java & ColdDrink.java)
Step4: Create concrete classes extending Burger and ColdDrink classes (VegBurger.java, ChickenBurger.java, Coke.java &Pepsi.java)
Step5: Create a Meal class having Item objects defined above. (Meal.java)
Step6: Create a MealBuilder class, the actual builder class responsible to create Meal objects. (MealBuilder.java)
Step7: BuiderPatternDemo uses MealBuider to demonstrate builder pattern. (BuilderPatternDemo.java)
Step8: O/P

