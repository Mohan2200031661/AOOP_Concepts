Prototype Pattern:
-> It refers to creating duplicate object while keeping performance in mind.
-> This pattern involves implementing a prototype interface which tells to create a clone of the current object. 
-> This pattern is used when creation of object directly is costly.
-> For example, an object is to be created after a costly database operation. We can cache the object, returns its clone on next request and update the database as and when needed thus reducing database calls.


Example:
We're going to create an abstract class Shape and concrete classes extending the Shape class. 

A class ShapeCache is defined as a next step which stores shape objects in a Hashtable and returns their clone when requested.

PrototypPatternDemo, our demo class will use ShapeCache class to get a Shape object.

-> Refer the Image in Source Folder for more detailed depiction


Steps:
Step1: Create an abstract class implementing Cloneable interface. (Shape.java)
Step2: Create concrete classes extending the above class. (Rectangle.java, Square.java, & Circle.java)
Step3: Create a class to get concrete classes from database and store them in a Hashtable. (ShapeCache.java)
Step4: Create PrototypePatternDemo uses ShapeCache class to get clones of shapes stored in a Hashtable. (PrototypePatternDemo.java)
Step5: O/P